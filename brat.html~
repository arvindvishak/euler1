<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="chrome=1">
    <title>Euler1 by gdm9000</title>

    <link rel="stylesheet" href="stylesheets/styles.css">
    <link rel="stylesheet" href="stylesheets/github-light.css">
    <meta name="viewport" content="width=device-width">
    <!--[if lt IE 9]>
    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
  </head>

  <body>
    <div class="wrapper">
      <header>
        <h1>Euler1</h1>
        <p></p>

        <p class="view"><a href="https://github.com/gdm9000/euler1">View the Project on GitHub <small>gdm9000/euler1</small></a></p>

        <ul>
          <li><a href="https://github.com/gdm9000/euler1/zipball/master">Download <strong>ZIP File</strong></a></li>
          <li><a href="https://github.com/gdm9000/euler1/tarball/master">Download <strong>TAR Ball</strong></a></li>
          <li><a href="https://github.com/gdm9000/euler1">View On <strong>GitHub</strong></a></li>
        </ul>
      
	<p>
	  <a href='index.html'>Home</a><br></br>
	  <a href='ada.html'>Ada</a><br></br>
	  <a href='algol.html'>Algol 68</a><br></br>
	</p>
      </header>
      <section>
        <h3>
<a id="welcome-to-euler-1" class="anchor" href="#welcome-to-euler-1" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Ada</h3>

<p>
<a title="brat" href="http://brat-lang.org/">Brat</a>, introduced in 2010, is a toy language designed to be simple and fun. It's a dynamically-typed language which runs as bytecodes on the <a title="lua" href="http://www.lua.org/">Lua</a> <a title="vm" href="http://en.wikipedia.org/wiki/Virtual_machine">VM</a>. Here's an example of <a title="Euler1" href="http://projecteuler.net/problem=1">Euler1</a>, which took me only minutes to write upon my first look at the language. It uses a <a title="list comprehension" href="http://en.wikipedia.org/wiki/List_comprehension">list comprehension</a> in a  <a title="functional" href="http://en.wikipedia.org/wiki/Functional_programming">functional</a> style that looks fairly influenced by <a title="ruby" href="http://gdm9000.wordpress.com/2011/10/15/ruby/">Ruby</a>. Notice that a function implicitly returns the value of its last statement:
</p>

<div style="background:#f0f3f3;overflow:auto;width:auto;color:black;margin-bottom:20px;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">
<pre style="margin:0;line-height:125%;"><span style="color:#0099ff;font-style:italic;"># Euler1 in Brat</span>

<span style="color:#0000ff;"><strong>euler1 </strong></span><span style="color:#555555;">=</span> { size <span style="color:#555555;">|</span>
    ints <span style="color:#555555;">=</span> <span style="color:#ff6600;">1</span><span style="color:#555555;">.</span>to(size)<span style="color:#555555;">.</span>select { x <span style="color:#555555;">|</span> x <span style="color:#555555;">% </span><span style="color:#ff6600;">3 </span><span style="color:#555555;">== </span><span style="color:#ff6600;">0</span> <span style="color:#555555;">||</span> x <span style="color:#555555;">% </span><span style="color:#ff6600;">5 </span><span style="color:#555555;">== </span><span style="color:#ff6600;">0</span> }
    ints<span style="color:#555555;">.</span>reduce<span style="color:#ff9900;"> :+</span>
}

<span style="color:#336666;">p</span> <span style="color:#0000ff;"><strong>euler1</strong> </span><span style="color:#ff6600;">999</span></pre>
</div>

<p></p>
<p>
<span style="font-size:13px;line-height:19px;">What does a simple </span><a style="font-size:13px;line-height:19px;" title="imperative" href="http://en.wikipedia.org/wiki/Imperative_programming">imperative</a><span style="font-size:13px;line-height:19px;"> version look like? Here's one where we explicitly decrement a counter in a loop:</span>
</p>

<div style="background:#f0f3f3;overflow:auto;width:auto;margin-bottom:20px;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">
<pre style="margin:0;line-height:125%;"><span style="color:#0099ff;font-style:italic;"># Euler1 in Brat</span>

<strong><span style="color:#0000ff;">euler1</span> </strong><span style="color:#555555;">=</span> { x <span style="color:#555555;">|</span>
    result <span style="color:#555555;">=</span> <span style="color:#ff6600;">0</span>
    <span style="color:#006699;font-weight:bold;">while</span> {x <span style="color:#555555;">&gt;</span> <span style="color:#ff6600;">0</span>} {
        <span style="color:#006699;">true</span>? x <span style="color:#555555;">% </span><span style="color:#ff6600;">3 </span><span style="color:#555555;">== </span><span style="color:#ff6600;">0</span> <span style="color:#555555;">||</span> x <span style="color:#555555;">% </span><span style="color:#ff6600;">5 </span><span style="color:#555555;">== </span><span style="color:#ff6600;">0
</span>            { result = result + x }
        x <span style="color:#555555;">=</span> x <span style="color:#555555;">-</span> <span style="color:#ff6600;">1</span>
    }
    result
}

<span style="color:#336666;">p</span> <strong><span style="color:#0000ff;">euler1</span> </strong><span style="color:#ff6600;">999</span></pre>
</div>

<p></p>
<p>
Brat brags that it's so simple it has no keywords. Wait, what? Well, the only fixed syntax is its operators; everything else is implemented as an object or function redefinable at runtime. Okay, so there <em>is</em> a base set of functions like <em>p</em> (print) and <em>while</em>, but still it's pretty small.
</p>

<p>
In Brat, everything is either an object or a function, and classes are <a title="prototype" href="http://en.wikipedia.org/wiki/Prototype-based_programming">prototype</a>-based - merely dictionaries of objects. Here’s an example - we instantiate a new object which has two properties, <em>size</em> and <em>result</em>, and one method, <em>solve</em>. We then call the solve method. Yes, it’s contrived - <a title="OOP" href="https://en.wikipedia.org/wiki/Object-oriented_programming">OOP</a> is way overkill for so simple a problem, but let's try anyway:
</p>

<div style="background:#f0f3f3;overflow:auto;width:auto;margin-bottom:20px;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">
<pre style="margin:0;line-height:125%;"><span style="color:#0099ff;font-style:italic;"># Euler1 in Brat</span>

<span style="color:#ff0000;">euler1</span> <span style="color:#555555;">=</span> <span style="color:#006699;">new</span>

<span style="color:#ff0000;">euler1</span><span style="color:#555555;">.</span><strong><span style="color:#339966;">size</span> </strong><span style="color:#555555;">=</span> <span style="color:#ff6600;">999</span>
<span style="color:#ff0000;">euler1</span><span style="color:#555555;">.</span><strong><span style="color:#339966;">result</span> </strong><span style="color:#555555;">=</span> <span style="color:#ff6600;">0</span>

<span style="color:#ff0000;">euler1</span><span style="color:#555555;">.</span><strong><span style="color:#0000ff;">solve</span> </strong><span style="color:#555555;">=</span> {
    ints <span style="color:#555555;">=</span> <span style="color:#ff6600;">1</span><span style="color:#555555;">.</span>to(<span style="color:#ff0000;">my</span><span style="color:#555555;">.</span><strong><span style="color:#339966;">size</span></strong>)<span style="color:#555555;">.</span>select { x <span style="color:#555555;">|</span> x <span style="color:#555555;">% </span><span style="color:#ff6600;">3 </span><span style="color:#555555;">== </span><span style="color:#ff6600;">0</span> <span style="color:#555555;">||</span> x <span style="color:#555555;">% </span><span style="color:#ff6600;">5 </span><span style="color:#555555;">== </span><span style="color:#ff6600;">0</span> }
    <span style="color:#ff0000;">my</span><span style="color:#555555;">.</span><strong><span style="color:#339966;">result</span> </strong><span style="color:#555555;">=</span> ints<span style="color:#555555;">.</span>reduce<span style="color:#ff9900;"> :+</span>
}

<span style="color:#ff0000;">euler1</span><span style="color:#555555;">.</span><strong><span style="color:#0000ff;">solve</span></strong>
<span style="color:#336666;">p</span> <span style="color:#ff0000;">euler1</span><span style="color:#555555;">.</span><strong><span style="color:#339966;">result
</span></strong></pre>
</div>

<p></p>
<p>
Next is a functional version that uses <a title="TailRecursion" href="http://stackoverflow.com/questions/33923/what-is-tail-recursion">tail recursion</a> with an accumulator. One of the main points here is that the function <em>euler</em> is <a title="Determinism" href="http://en.wikipedia.org/wiki/Deterministic_algorithm">deterministic</a> – it will always return the same output for a given input. This is accomplished in part by the absence of any variable manipulation – there are instead only functions which return values. The other main point is that this recursion uses tail call optimization – it’s written in such a way that an intelligent compiler can optimize its stack usage to be <a title="big o notation" href="http://en.wikipedia.org/wiki/Big_O_notation"><em>O(n)</em> instead of<em> O(n!)</em></a>. In English, this means that your program will probably not crash even for hugely recursive calls.
</p>

<div style="background:#f0f3f3;overflow:auto;width:auto;margin-bottom:20px;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">
<pre style="margin:0;line-height:125%;"><span style="color:#0099ff;font-style:italic;"># Euler1 in Brat</span>

<span style="color:#0000ff;"><strong>euler </strong></span><span style="color:#555555;">=</span> { n, acc <span style="color:#555555;">|</span>
    <span style="color:#006699;">true</span>? n <span style="color:#555555;">&lt;=</span> <span style="color:#ff6600;">1</span>
        { acc }
        { <span style="color:#006699;">true</span>? n <span style="color:#555555;">%</span> <span style="color:#ff6600;">3</span> <span style="color:#555555;">==</span> <span style="color:#ff6600;">0</span> <span style="color:#555555;">||</span> n <span style="color:#555555;">%</span> <span style="color:#ff6600;">5</span> <span style="color:#555555;">==</span> <span style="color:#ff6600;">0</span>
            { <strong><span style="color:#0000ff;">euler</span> </strong>n <span style="color:#555555;">-</span> <span style="color:#ff6600;">1</span>, acc <span style="color:#555555;">+</span> n }
            { <strong><span style="color:#0000ff;">euler</span> </strong>n <span style="color:#555555;">-</span> <span style="color:#ff6600;">1</span>, acc }}}

<strong><span style="color:#0000ff;">euler1</span> </strong><span style="color:#555555;">=</span> { n <span style="color:#555555;">|</span> <strong><span style="color:#0000ff;">euler</span> </strong>n, <span style="color:#ff6600;">0</span> }

<span style="color:#336666;">p</span> <strong><span style="color:#0000ff;">euler1</span> </strong><span style="color:#ff6600;">999</span></pre>
</div>

<p></p>
<p>
Brat tries to be flexible in its syntax regarding requirement of braces, parens, commas, etc, but it just ends up feeling flaky. It took me about an hour to figure out how to get the above to work.
</p>
<p>
<span style="font-size:13px;line-height:19px;">As expected, functions are first-class members that can be passed around like objects. Brat uses an arrow operator, <em>-&gt;</em>, to indicate functions that should be referenced instead of performed. More documentation can be found here: </span><a href="https://github.com/presidentbeef/brat/wiki/The-Complete-Brat">https://github.com/presidentbeef/brat/wiki/The-Complete-Brat</a>
</p>
<p>
Disappointingly, I tried to install Brat from source but failed. Luckily, Brat's web site contains an <a title="brat" href="http://try.brat-lang.org/">interactive code editor</a>, complete with samples, which lets you immediately play with the language. Nothing to install - brilliant! To run, just put your code in the online editor and click <em>Try it!</em>:
</p>

<pre style="color:#000000;background:#f1f0f0;"><span style="color:#c00000;">233168</span></pre>

<p></p>
<p>
I was going to write more different kinds of examples of Euler1 in Brat, but I think I broke the online interpreter. I was playing with first-class functions, and I think I accidentally issued an unbounded recursion routine. The site crashed, and it's now been down over a day. Well, that's it for Brat!
</p>

      </section>
      <footer>
        <p>This project is maintained by <a href="https://github.com/gdm9000">gdm9000</a></p>
        <p><small>Hosted on GitHub Pages &mdash; Theme by <a href="https://github.com/orderedlist">orderedlist</a></small></p>
      </footer>
    </div>
    <script src="javascripts/scale.fix.js"></script>
    
  </body>
</html>
